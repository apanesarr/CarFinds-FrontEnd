{"version":3,"sources":["SearchBar.js","components/CarCards.js","components/Pagination.js","Cars.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","handleSearchChange","e","value","setState","isLoading","setTimeout","state","length","handleSubmit","bind","this","callbackFromParent","className","Search","loading","showNoResults","onSearchChange","Component","CarCards","console","log","cars","Card","Group","isLoaded","map","car","Image","src","img","Content","Header","name","Description","price","mileage","extra","href","link","site","Pagination","onPageChange","activePage","defaultActivePage","page","totalPages","count","Cars","pageUpdate","data","newpage","getData","query","prevState","window","scrollTo","fetch","headers","authorization","then","res","json","results","error","style","paddingTop","col","padding","Math","round","App","searchUpdate","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mXAGqBA,E,YACjB,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAURC,mBAAqB,SAACC,EAAD,GAAmB,IAAbC,EAAY,EAAZA,MACzB,EAAKC,SAAS,CAAEC,WAAW,EAAMF,UACjCG,YAAW,WACL,EAAKC,MAAMJ,MAAMK,OAAS,GAAG,EAAKJ,SAAS,CAAEC,WAAW,IAC5D,EAAKD,SAAS,CACZC,WAAW,IAEb,EAAKI,iBACJ,MAjBH,EAAKF,MAAQ,CACXF,WAAW,EACXF,MAAO,IAET,EAAKF,mBAAqB,EAAKA,mBAAmBS,KAAxB,gBAC1B,EAAKD,aAAe,EAAKA,aAAaC,KAAlB,gBAPL,E,4EAwBfC,KAAKX,MAAMY,mBAAmBD,KAAKJ,MAAMJ,S,+BAGjC,IAAD,EACsBQ,KAAKJ,MAA1BF,EADD,EACCA,UAAWF,EADZ,EACYA,MACnB,OACE,yBAAKU,UAAU,aACb,wBAAIA,UAAU,QAAd,YACA,yBAAKA,UAAU,kBACf,kBAACC,EAAA,EAAD,CACEC,QAASV,EACTW,eAAe,EACfC,eAAgBN,KAAKV,mBACrBE,MAAOA,U,GAtCkBe,a,yBCwBxBC,MAxBf,SAAkBnB,GAEd,OADAoB,QAAQC,IAAIrB,EAAMsB,MAEd,kBAACC,EAAA,EAAKC,MAAN,CAAYX,UAAU,gBACjBb,EAAMyB,SAAWzB,EAAMsB,KAAKI,KAAI,SAACC,GAAD,OACjC,kBAACJ,EAAA,EAAD,KACI,kBAACK,EAAA,EAAD,CAAOf,UAAU,iBAAiBgB,IAAKF,EAAIG,MAC3C,kBAACP,EAAA,EAAKQ,QAAN,KACA,kBAACR,EAAA,EAAKS,OAAN,CAAanB,UAAY,OAAOc,EAAIM,MACpC,kBAACV,EAAA,EAAKW,YAAN,KACI,sCADJ,IACoBP,EAAIQ,MACpB,6BACA,wCAAiBR,EAAIS,UAGzB,kBAACb,EAAA,EAAKQ,QAAN,CAAcM,OAAK,GACf,uBAAGC,KAAMX,EAAIY,MAAOZ,EAAIa,WAG9B,yC,SCfCrB,MALf,SAAkBnB,GACd,OACI,kBAACyC,EAAA,EAAD,CAAYC,aAAc,SAACxC,EAAD,OAAIyC,EAAJ,EAAIA,WAAJ,OAAoB3C,EAAMY,mBAAmB+B,IAAaC,kBAAmB5C,EAAM6C,KAAMC,WAAY9C,EAAM+C,SCAxHC,G,mBACjB,WAAYhD,GAAO,IAAD,8BACd,4CAAMA,KA2BViD,WAAa,SAACC,GACV,EAAK9C,SAAS,CACV+C,QAASD,KA5Bb,EAAK3C,MAAQ,CACXe,KAAM,GACNG,UAAU,EACVsB,MAAO,EACPF,KAAM,EACNM,QAAS,GAEX,EAAKC,QAAU,EAAKA,QAAQ1C,KAAb,gBATD,E,iFAcdC,KAAKyC,QAAQzC,KAAKJ,MAAM4C,QAASxC,KAAKX,MAAMqD,S,yCAG7BA,EAAOC,GACnB3C,KAAKJ,MAAM8C,QAAQ1C,KAAKX,MAAMqD,OAC7B1C,KAAKyC,QAAQzC,KAAKJ,MAAMsC,KAAMlC,KAAKX,MAAMqD,OAE1C1C,KAAKJ,MAAM4C,UAAUxC,KAAKJ,MAAMsC,OAC/BlC,KAAKyC,QAAQzC,KAAKJ,MAAM4C,QAASxC,KAAKJ,MAAM8C,OAC5CE,OAAOC,SAAS,EAAG,M,8BAYnBX,EAAKQ,GAAQ,IAAD,OAChBI,MAAM,wDAA0DZ,EAAO,WAAaQ,EAAO,CACzFK,QAAS,CACLC,cAAe,oDAEpBC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAClBF,MAEC,SAACV,GAEC,EAAK9C,SAAS,CACZqB,UAAU,EACVH,KAAM4B,EAAKa,QACXV,MAAOA,EACPR,KAAMA,EACNE,MAAOG,EAAKH,WAGhB,SAACiB,GACC,EAAK5D,SAAS,CACZqB,UAAU,EACVuC,e,+BAMC,IAAD,EAC+BrD,KAAKJ,MAAnCe,EADD,EACCA,KAAMG,EADP,EACOA,SAASsB,EADhB,EACgBA,MAAOF,EADvB,EACuBA,KAC3B,OACI,6BACI,yBAAKoB,MAAO,CAACC,WAAY,KACrB,kBAAC,EAAD,CAAUC,KAAG,EAAC1C,SAAUA,EAAUH,KAAQA,KAE9C,4BAAQ2C,MAAO,CAACG,QAAQ,KACpB,kBAAC,EAAD,CAAYxD,mBAAoBD,KAAKsC,WAAYJ,KAAQA,EAAME,MAASsB,KAAKC,MAAMvB,EAAM,Y,GAvE3E7B,cC4BnBqD,G,mBA1Bb,WAAYvE,GAAO,IAAD,8BAChB,4CAAMA,KAMRwE,aAAe,SAACtB,GACd,EAAK9C,SAAS,CACZiD,MAAOH,KAPT,EAAK3C,MAAQ,CACX8C,MAAO,IAHO,E,sEAaT,IACAA,EAAS1C,KAAKJ,MAAd8C,MAEP,OACE,yBAAKxC,UAAU,OACb,kBAAC,EAAD,CAAWD,mBAAoBD,KAAK6D,eACpC,kBAAC,EAAD,CAAOnB,MAAOA,S,GApBJnC,cCOEuD,QACW,cAA7BlB,OAAOmB,SAASC,UAEe,UAA7BpB,OAAOmB,SAASC,UAEhBpB,OAAOmB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,MAAK,SAAAwB,GACjCA,EAAaC,kB","file":"static/js/main.d7a98868.chunk.js","sourcesContent":["import \"./SearchBar.css\"\nimport React, {Component} from 'react';\nimport {Search} from 'semantic-ui-react';\nexport default class SearchBar extends Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n          isLoading: false,\n          value: ''\n        };\n        this.handleSearchChange = this.handleSearchChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n      }\n      \n    \n      handleSearchChange = (e, { value }) => {\n        this.setState({ isLoading: true, value })\n        setTimeout(() => {\n          if (this.state.value.length < 1) this.setState({ isLoading: false }) \n          this.setState({\n            isLoading: false,\n          })\n          this.handleSubmit()\n        }, 300)\n       \n      }\n    \n      handleSubmit(){\n        this.props.callbackFromParent(this.state.value)\n      }\n    \n      render() {\n        const { isLoading, value } = this.state\n        return (\n          <div className=\"searchbar\">\n            <h1 className=\"logo\">CarFinds</h1>\n            <div className=\"searchbar-left\">\n            <Search \n              loading={isLoading} \n              showNoResults={false} \n              onSearchChange={this.handleSearchChange}\n              value={value}\n            />\n            </div>\n          </div>\n        );\n      }\n    }","import React from 'react';\nimport {Card, Image} from 'semantic-ui-react';\nimport \"./CarCards.css\"\nfunction CarCards(props) {\n    console.log(props.cars)\n    return (\n        <Card.Group className=\"card-columns\">\n            {props.isLoaded ? props.cars.map((car)=>\n            <Card>\n                <Image className=\"center-cropped\" src={car.img}/>\n                <Card.Content>\n                <Card.Header className = \"txt\">{car.name}</Card.Header>\n                <Card.Description>\n                    <b>Price: </b> {car.price}\n                    <br/>\n                    <b>Mileage: </b>{car.mileage}\n                </Card.Description>\n                </Card.Content>\n                <Card.Content extra>\n                    <a href={car.link}>{car.site}</a>\n                </Card.Content>\n            </Card>\n            ):<h3>Loading</h3>}\n        </Card.Group>\n    )\n    \n}\nexport default CarCards","import React from 'react';\nimport { Pagination } from 'semantic-ui-react'\nfunction CarCards(props) {\n    return(\n        <Pagination onPageChange={(e,{activePage}) => props.callbackFromParent(activePage)} defaultActivePage={props.page} totalPages={props.count} />\n    )\n}\nexport default CarCards","import React, {Component} from 'react';\nimport CarCards from './components/CarCards';\nimport Pagination from './components/Pagination';\nimport config from './config.js';\nexport default class Cars extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n          cars: [],\n          isLoaded: false,\n          count: 0,\n          page: 1,\n          newpage: 1,\n        }\n        this.getData = this.getData.bind(this);\n      }\n    \n    \n    componentDidMount(){\n        this.getData(this.state.newpage, this.props.query)\n    }  \n\n    componentDidUpdate(query, prevState) {\n        if(this.state.query!==this.props.query){\n            this.getData(this.state.page, this.props.query)\n        }\n        if(this.state.newpage!==this.state.page){\n            this.getData(this.state.newpage, this.state.query)\n            window.scrollTo(0, 0)\n        }\n\n    }\n\n    pageUpdate = (data) =>{\n        this.setState({\n            newpage: data\n        })\n    }\n\n\n    getData(page,query) {\n        fetch('http://carfinds.pythonanywhere.com/api/v1/cars/?page=' + page + '&search=' + query, {\n          headers: {\n              authorization: 'Token 282bc98780517b27f0154742eddb58ae47c9dbd4'\n          }\n      }).then(res => res.json())\n      .then(\n          \n        (data) => {\n        \n          this.setState({\n            isLoaded: true,\n            cars: data.results,\n            query: query,\n            page: page,\n            count: data.count \n          });\n        },\n        (error) => {\n          this.setState({\n            isLoaded: false,\n            error\n          });\n        }\n      )\n    }\n\n    render(){\n        let {cars, isLoaded,count, page} = this.state\n        return(\n            <div>\n                <div style={{paddingTop: 10}}>\n                    <CarCards col isLoaded={isLoaded} cars = {cars}/>\n                </div>\n                <footer style={{padding:30}}>\n                    <Pagination callbackFromParent={this.pageUpdate} page = {page} count = {Math.round(count/24)}/>\n                </footer>\n            </div>\n        );\n    }\n}","import React, {Component} from 'react';\nimport SearchBar from './SearchBar';\nimport Cars from'./Cars';\nimport './App.css';\n\nclass App extends Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      query: '',\n    }\n  }\n\n  searchUpdate = (data) => {\n    this.setState({\n      query: data\n    })\n  }\n\n  render(){\n    const {query} = this.state\n   \n    return (\n      <div className=\"App\">\n        <SearchBar callbackFromParent={this.searchUpdate}/> \n        <Cars  query={query} />\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}